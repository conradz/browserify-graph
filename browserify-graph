#!/usr/bin/env node

var detective = require('detective'),
    resolve = require('browser-resolve'),
    fs = require('graceful-fs'),
    path = require('path'),
    async = require('async'),
    archy = require('archy'),
    optimist = require('optimist');

var usageString = 'Usage: browserify-graph -d [depth] <file>'
                + '\nPrints out a graph of all modules a file depends on'
                + '\nUses the same dependency resolution as browserify';

var argv = optimist
    .usage(usageString)
    .alias('depth', 'd')
    .boolean(['noExternal'])
    .describe('noExternal', 'Don\'t walk external dependencies')
    .demand(1)
    .argv;

var IS_CORE = /^[^\\\/]+$/,
    file = path.resolve(argv._[0]),
    basedir = path.dirname(file),
    maxDepth = argv.depth || -1,
    cache = {};

get(file, done, 0);

function get(file, callback, level) {
    if (IS_CORE.test(file)) {
        return callback(null, { label: file + ' - builtin', nodes: [] });
    }

    file = path.resolve(file);

    if(argv['noExternal'] && file.indexOf('node_modules') >= 0) {
        return callback(null, { label: file + ' - external', nodes: [] });
    }

    if(maxDepth > 0 && level >= maxDepth) {
        return callback(null, { label: path.relative(basedir, file), nodes: [] });
    }
    
    if(typeof cache[file] === 'undefined' || !cache[file]) {
        cache[file] = {};
        fs.readFile(file, 'utf8', read);
    } else {
        read(null, null);
    }

    function read(err, contents) {
        if (err) {
            return callback(err);
        }
        
        var requires = [];
        if(typeof cache[file] === 'undefined' || !cache[file] || !cache[file].requires) {
            requires = detective(contents);
            cache[file].requires = requires;
        } else {
            requires = cache[file].requires;
        }
        async.map(requires, getDep, gotDeps);
    }

    function getDep(name, callback) {
        resolve(name, { filename: file }, resolved);

        function resolved(err, p) {
            if (err) {
                return callback(err);
            }

            return get(p, callback, level + 1);
        }
    }

    function gotDeps(err, deps) {
        if (err) {
            return callback(err);
        }

        callback(null, { label: path.relative(basedir, file), nodes: deps });
    }
}

function done(err, data) {
    if (err) throw err;
    console.log(archy(data));
}